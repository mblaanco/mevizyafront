{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport history from \"../../../services/history\";\nimport { signInSuccess } from './actions';\nimport api from \"../../../services/api\";\nexport function* signIn({\n  payload\n}) {\n  try {\n    const {\n      email,\n      password\n    } = payload;\n    const response = yield call(api.post, 'sessions', {\n      email,\n      password\n    });\n    const {\n      token,\n      user\n    } = response.data;\n\n    if (!user.provider) {\n      console.tron.error('Usuário não é prestador.');\n      return;\n    }\n\n    yield put(signInSuccess(token, user));\n    history.push('/dashboard');\n  } catch (err) {\n    yield put(signFailure(token, user));\n  }\n}\nexport default all([takeLatest('@auth/SIGN_IN_REQUEST', signIn)]);","map":{"version":3,"sources":["/home/murilo/Documentos/Bootcamp/Fase 5/modulo09/src/store/modules/auth/sagas.js"],"names":["takeLatest","call","put","all","history","signInSuccess","api","signIn","payload","email","password","response","post","token","user","data","provider","console","tron","error","push","err","signFailure"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AAEA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAASC,aAAT,QAA8B,WAA9B;AAEA,OAAOC,GAAP,MAAgB,uBAAhB;AAEA,OAAO,UAAUC,MAAV,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAA8B;AACnC,MAAI;AACF,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAsBF,OAA5B;AAEA,UAAMG,QAAQ,GAAG,MAAMV,IAAI,CAACK,GAAG,CAACM,IAAL,EAAW,UAAX,EAAuB;AAChDH,MAAAA,KADgD;AAEhDC,MAAAA;AAFgD,KAAvB,CAA3B;AAKA,UAAM;AAAEG,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkBH,QAAQ,CAACI,IAAjC;;AAEA,QAAI,CAACD,IAAI,CAACE,QAAV,EAAoB;AAClBC,MAAAA,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmB,0BAAnB;AACA;AACD;;AACD,UAAMjB,GAAG,CAACG,aAAa,CAACQ,KAAD,EAAQC,IAAR,CAAd,CAAT;AAEAV,IAAAA,OAAO,CAACgB,IAAR,CAAa,YAAb;AACD,GAjBD,CAiBE,OAAOC,GAAP,EAAY;AACZ,UAAMnB,GAAG,CAACoB,WAAW,CAACT,KAAD,EAAQC,IAAR,CAAZ,CAAT;AACD;AACF;AAED,eAAeX,GAAG,CAAC,CAACH,UAAU,CAAC,uBAAD,EAA0BO,MAA1B,CAAX,CAAD,CAAlB","sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects';\n\nimport history from '~/services/history';\nimport { signInSuccess } from './actions';\n\nimport api from '~/services/api';\n\nexport function* signIn({ payload }) {\n  try {\n    const { email, password } = payload;\n\n    const response = yield call(api.post, 'sessions', {\n      email,\n      password,\n    });\n\n    const { token, user } = response.data;\n\n    if (!user.provider) {\n      console.tron.error('Usuário não é prestador.');\n      return;\n    }\n    yield put(signInSuccess(token, user));\n\n    history.push('/dashboard');\n  } catch (err) {\n    yield put(signFailure(token, user));\n  }\n}\n\nexport default all([takeLatest('@auth/SIGN_IN_REQUEST', signIn)]);\n"]},"metadata":{},"sourceType":"module"}